datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Drink {
  id                       Int               @id @default(autoincrement())
  name                     String            @unique
  categoryId               Int?
  alcoholicTypeId          Int?
  glassId                  Int?
  instructions             String?
  ingredients              DrinkIngredient[]

  category      Category?      @relation(fields: [categoryId], references: [id])
  glass         Glasses?       @relation(fields: [glassId], references: [id])
  alcoholicType AlcoholicType? @relation(fields: [alcoholicTypeId], references: [id])
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  alcohol     Boolean
  categoryId  Int?
  abv         Int?

  category        Category?         @relation(fields: [categoryId], references: [id])
  DrinkIngredient DrinkIngredient[]
}

model DrinkIngredient {
  drinkId      Int
  ingredientId Int
  optional     Boolean
  measurement  String?

  drink      Drink      @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([drinkId, ingredientId])

}

model AlcoholicType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Drink Drink[]
}

model Glasses {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Drink Drink[]
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Drink      Drink[]
  Ingredient Ingredient[]
}
